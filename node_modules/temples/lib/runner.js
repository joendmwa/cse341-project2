"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const path_1 = tslib_1.__importDefault(require("path"));
const chalk_1 = require("chalk");
const cli_1 = require("./cli");
const generator_1 = require("./generator");
const handlebars_1 = require("./handlebars");
const serializers_1 = require("./serializers");
const utils_1 = require("./utils");
/**
 * Customize Handlebars instance from
 * config file path from temples config.
 *
 * @param {TemplesConfig} temples
 */
async function customizeHandlebars(temples) {
    const { handlebars } = temples;
    if (handlebars) {
        await handlebars_1.customize(path_1.default.resolve(handlebars));
    }
}
/**
 * Run temples from the generator command, and props.
 *
 * 1. Configure Handlebars instance
 * 2. Generate files
 * 3. Generate inserts
 *
 * @param {string} generator - generator command name
 * @param {Props} props
 * @param {TemplesConfig} temples
 * @param {boolean} verbose
 */
async function run(generator, props, temples, verbose = false) {
    await customizeHandlebars(temples);
    // Get config for generator command
    const { generators } = temples;
    const generatorConfig = generators[generator];
    // Check that generator command exists in temples
    if (!generatorConfig) {
        throw new Error(`Command ${generator} not found in temples configuration.`);
    }
    // Only run if there are files or inserts specified
    if (lodash_1.isEmpty(generatorConfig.files) && lodash_1.isEmpty(generatorConfig.inserts)) {
        throw new Error(`Specify files or inserts for ${generator}.`);
    }
    // Assign properties that can be overridden
    const base = utils_1.override(serializers_1.serializeBasePathsConfig(temples.base), serializers_1.serializeBasePathsConfig(generatorConfig.base));
    const regex = utils_1.override(temples.regex, generatorConfig.regex);
    const position = temples.position || generatorConfig.position;
    const defaultProps = utils_1.override(temples.default, generatorConfig.default);
    const completeProps = utils_1.override(defaultProps, props);
    const { files, inserts } = generatorConfig;
    // Generate files
    if (files) {
        await cli_1.logProcesses(`\nGenerating ${chalk_1.cyan(files.length)} file(s)`, files.map((file) => generator_1.ListrGenerateFile(file.target, file.template, completeProps, base)));
    }
    if (inserts) {
        await cli_1.logProcesses(`\nInserting into ${chalk_1.cyan(inserts.length)} file(s)`, inserts.map((insert) => generator_1.ListrGenerateInsert(insert.target, utils_1.override(regex, insert.regex), completeProps, position || insert.position, base)));
    }
}
exports.default = run;
