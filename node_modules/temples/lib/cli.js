"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logProcesses = exports.promptProps = exports.promptGeneratorCommand = void 0;
const tslib_1 = require("tslib");
const listr_1 = tslib_1.__importDefault(require("listr"));
const chalk_1 = require("chalk");
const utils_1 = require("./utils");
/**
 * Enquirer's support for Typescript is poor.
 *
 * Somehow commonJS require works but import from
 * does not.
 */
const { Select, Input } = require('enquirer');
/**
 * Name with or without documentation
 *
 * @param {string} name
 * @param {string | null} doc
 * @param {boolean} isBold - should name be bolded?
 *
 * @return {string}
 */
function withDocumentation(name, doc, isBold = true) {
    const outName = isBold ? chalk_1.bold(name) : name;
    return doc ? `${outName}: ${chalk_1.dim(doc)}` : outName;
}
/**
 * Prompt for generator command.
 *
 * @param {string[]} generators - list of available generators
 *
 * @return {string} chosen generator
 */
async function promptGeneratorCommand(generators) {
    const choices = Object.entries(generators).map(([name, { doc }]) => ({
        name,
        message: withDocumentation(name, doc, false),
    }));
    const prompt = new Select({
        name: 'generator',
        message: 'Select generator to run:',
        choices,
    });
    const decision = await prompt.run();
    return decision;
}
exports.promptGeneratorCommand = promptGeneratorCommand;
/**
 * Prompt for props' values.
 *
 * @param {string} generator - generator for props
 * @param {PromptConfig[]} prompts - list of prompted props
 *
 * @return {Props} props key value mapping
 */
async function promptProps(generator, prompts, defaultProps = {}) {
    const props = {};
    for (const p of prompts) {
        const name = utils_1.isString(p) ? p : p.name;
        const doc = utils_1.isString(p) ? null : p.doc;
        const message = withDocumentation(name, doc);
        const input = new Input({
            message,
            initial: defaultProps[name],
        });
        const value = await input.run();
        props[name] = value;
    }
    return props;
}
exports.promptProps = promptProps;
/**
 * Run and notify given Listr processes.
 *
 * @param {string} title - title for set of processes
 * @param {ListrTask[]} processes - Listr processes to run
 * @param {object} options - Listr options
 */
async function logProcesses(title, processes, options = { exitOnError: false }) {
    console.log(title);
    try {
        await new listr_1.default(processes, options).run();
    }
    catch (e) { }
}
exports.logProcesses = logProcesses;
