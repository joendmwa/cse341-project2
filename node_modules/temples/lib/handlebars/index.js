"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customize = exports.compileOptions = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const handlebars_1 = tslib_1.__importDefault(require("handlebars"));
const lodash_1 = require("lodash");
/**
 * Registers custom casing helpers to the Handlebars environment.
 *
 * @see https://handlebarsjs.com/api-reference/runtime.html#handlebars-registerhelper-name-helper
 */
handlebars_1.default.registerHelper('camel-case', lodash_1.camelCase);
handlebars_1.default.registerHelper('kebab-case', lodash_1.kebabCase);
handlebars_1.default.registerHelper('snake-case', lodash_1.snakeCase);
handlebars_1.default.registerHelper('upper-case', lodash_1.upperCase);
handlebars_1.default.registerHelper('lower-case', lodash_1.lowerCase);
handlebars_1.default.registerHelper('start-case', lodash_1.startCase);
handlebars_1.default.registerHelper('title-case', (s) => {
    const casedString = lodash_1.startCase(s);
    return casedString.replace(/\s/g, '');
});
exports.compileOptions = {};
/**
 * Customize Handlebars instance through
 * user defined configuration.
 *
 * @param {string} p - path to user defined configuration
 */
async function customize(p) {
    if (!fs_1.default.existsSync(p)) {
        throw new Error(`Handlebars configuration file at ${p} not found.`);
    }
    const { default: configure } = await Promise.resolve().then(() => tslib_1.__importStar(require(p)));
    // Throw if configuration file does not
    // provide a default function.
    if (typeof configure !== 'function') {
        throw new Error(`Provide a default function in ${p}.`);
    }
    exports.compileOptions = configure(handlebars_1.default) || exports.compileOptions;
}
exports.customize = customize;
exports.default = handlebars_1.default;
