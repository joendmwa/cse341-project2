"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../utils");
const parser_1 = tslib_1.__importDefault(require("../parser"));
/**
 * Place str in the right position relative to.
 *
 * @param {string} to - string relative to
 * @param {string} str - string to place
 * @param {InsertPosition} position - relative position
 *
 * @return {string}
 */
function placeRelativeTo(to, str, position = 'below') {
    switch (position) {
        case 'above':
            return `${str}\n${to}`;
        case 'left':
            return `${str}${to}`;
        case 'right':
            return `${to}${str}`;
        default:
            return `${to}\n${str}`;
    }
}
/**
 * Replace given match in source with
 * parsed output.
 *
 * @param {string} source
 * @param {RegExpMatch} regexMatch
 * @param {InsertOptions} options
 *
 * @return {string}
 */
function parseAndReplace(source, regexMatch, props = {}, options = {}) {
    const [match, group] = regexMatch;
    if (!group) {
        return source;
    }
    const parsed = parser_1.default(group, props);
    const output = placeRelativeTo(match, parsed, options.position);
    // Splitting and joining replaces all occurences
    return source.split(match).join(output);
}
/**
 * Insert parsed output into given source.
 *
 * @param {string} source - template source
 * @param {string} regex - regex pattern for source
 * @param {Props} props - user defined props
 * @param {InsertOptions} options - insert options
 *
 * @return {string} compiled output
 */
function insert(source, regex, props = {}, options = {}) {
    const matches = utils_1.findMatchedRegExp(source, regex);
    const output = matches.reduce((acc, match) => parseAndReplace(acc, match, props, options), source);
    return output;
}
exports.default = insert;
