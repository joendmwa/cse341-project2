"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dictionary = void 0;
var runtype_1 = require("../runtype");
var string_1 = require("./string");
var constraint_1 = require("./constraint");
var show_1 = require("../show");
var NumberKey = constraint_1.Constraint(string_1.String, function (s) { return !isNaN(+s); }, { name: 'number' });
function Dictionary(value, key) {
    var keyRuntype = key === undefined
        ? string_1.String
        : key === 'string'
            ? string_1.String
            : key === 'number'
                ? NumberKey
                : key;
    var keyString = show_1.default(keyRuntype);
    return runtype_1.create(function (x, visited) {
        if (x === null || x === undefined) {
            var a = runtype_1.create(x, { tag: 'dictionary', key: keyString, value: value });
            return { success: false, message: "Expected " + show_1.default(a) + ", but was " + x };
        }
        if (typeof x !== 'object') {
            var a = runtype_1.create(x, { tag: 'dictionary', key: keyString, value: value });
            return { success: false, message: "Expected " + show_1.default(a.reflect) + ", but was " + typeof x };
        }
        if (Object.getPrototypeOf(x) !== Object.prototype) {
            if (!Array.isArray(x)) {
                var a = runtype_1.create(x, { tag: 'dictionary', key: keyString, value: value });
                return {
                    success: false,
                    message: "Expected " + show_1.default(a.reflect) + ", but was " + Object.getPrototypeOf(x),
                };
            }
            else if (keyString === 'string')
                return { success: false, message: 'Expected dictionary, but was array' };
        }
        var numberString = /^(?:NaN|-?\d+(?:\.\d+)?)$/u;
        for (var _i = 0, _a = __spreadArray(__spreadArray([], Object.getOwnPropertyNames(x)), Object.getOwnPropertySymbols(x)); _i < _a.length; _i++) {
            var k = _a[_i];
            // We should provide interoperability with `number` and `string` here,
            // as a user would expect JavaScript engines to convert numeric keys to
            // string keys automatically. So, if the key can be interpreted as a
            // decimal number, then test it against a `Number` OR `String` runtype.
            var isNumberLikeKey = typeof k === 'string' && numberString.test(k);
            var l = isNumberLikeKey ? global.Number(k) : k;
            if (isNumberLikeKey ? !keyRuntype.guard(l) && !keyRuntype.guard(k) : !keyRuntype.guard(l)) {
                return {
                    success: false,
                    message: "Expected dictionary key to be a " + keyString + ", but was " + typeof l,
                };
            }
            var validated = runtype_1.innerValidate(value, x[k], visited);
            if (!validated.success) {
                return {
                    success: false,
                    message: validated.message,
                    key: validated.key ? global.String(k) + "." + validated.key : global.String(k),
                };
            }
        }
        return { success: true, value: x };
    }, { tag: 'dictionary', key: keyString, value: value });
}
exports.Dictionary = Dictionary;
